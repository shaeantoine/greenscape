---
title: "Hackathon"
author: ""
title-block-banner: "#d85f33"
date: "`r format(Sys.time(), '%d %B, %Y %H:%M')`"
format:
  html: 
    self_contained: true
    theme: 
      - theme/style.scss
      - united
    embed-resources: true
    code-fold: true
    code-tools: true
table-of-contents: true
number-sections: true
page-layout: full
sidebar-width: 0px
fig-align: center
css: theme/style.css
---

```{r}
#| warning: false
#| message: false

library(tidyverse)
library(kableExtra)
library(rstatix)
library(knitr)
library(ggfortify)
library(ggpubr)
library(EnvStats)
library(brms)
library(scales)
library(sjPlot)
library(bayesplot)
library(extrafont)
library(reticulate)
library(janitor)

orange = "#003fdd"
lightorange = "#409cdd"
```

```{r}
#| warning: false
#| message: false
df = read_csv("../data/processed/AAPL.csv")

df = df |> clean_names()
```


```{r}
#| cache: true

results = capture.output({
suppressWarnings({
suppressMessages({
  # Defines formula 
  formula_HCC = bf(
    percentage_change*100 ~ bb_z_score + rsi + sentiment_number + linear_combination_sentiment,
    autocor = cor_arma(~ date, p=5, q=0)
  )
  
  # Fits model
  model_HCC = brm(formula = formula_HCC, 
                  data = df,
                  chains = 8, cores = 8, iter = 10000,
                  silent = 2, 
                  seed = 1)
  })
})
}, type = "message")
```

```{r}
fixed_effects = summary(model_HCC)$fixed |> data.frame()
autocor = summary(model_HCC)$cor_pars |> data.frame()

# Fix column names
colnames(fixed_effects) = c("Estimate", "SE", "l95", "u95", "$\\mathbf{\\hat{R}}$", "Bulk ESS", "Tail ESS")
colnames(autocor) = c("Estimate", "SE", "l95", "u95", "$\\mathbf{\\hat{R}}$", "Bulk ESS", "Tail ESS")

# Fix row names
fixed_effects = fixed_effects[rownames(fixed_effects) != "Intercept", ]
rownames(autocor) = c("AR(1)", "AR(2)", "AR(3)", "AR(4)", "AR(5)")

combined_table = rbind(fixed_effects, autocor)

# Make credible interval
combined_table$`95% CrI` = 
  paste0("[", 
         as.character(combined_table$l95 |> round(3)), 
         ", ",  
         as.character(combined_table$u95 |> round(3)), 
         "]")

# Round columns
for (col in c('Estimate', 'SE', '$\\mathbf{\\hat{R}}$')) {
  combined_table[[col]] = round(combined_table[[col]], 3)
  combined_table[[col]] = ifelse(combined_table[[col]]==1, "1.000", combined_table[[col]])
  combined_table[[col]] = ifelse(combined_table[[col]]==0.01, "0.010", combined_table[[col]])
}
for (col in c('Bulk ESS', 'Tail ESS')) {
  combined_table[[col]] = round(combined_table[[col]])
}

# Adds LaTeX to table
for (col in c('Estimate', 'SE', '95% CrI', '$\\mathbf{\\hat{R}}$', 'Bulk ESS', 'Tail ESS')) {
  combined_table[[col]] = paste0("$", combined_table[[col]], "$")
}

# Binds fixed effects and autocorrelation summaries
model_summary_table_kg1 = combined_table |> 
  select(Estimate, SE, `95% CrI`) |> 
  kable(digits = c(3,3,3,3,0,0), 
        align = c("c","c","c","c","c","c"))

model_summary_table_kg1
```

```{r}
round(bayes_R2(model_HCC)['R2', 'Estimate'], 2)
```


```{r}
posterior_samples = as_draws_df(model_HCC)

color_scheme_set(c(lightorange, orange, orange, orange, orange,lightorange))

mcmc_areas(
    posterior_samples,
    #pars = c("b_bb_z_score", "b_rsi", "b_sentiment_number", "b_linear_combination_sentiment", "ar[1]"),
    pars = c("b_sentiment_number"),
    prob = 0.95,
    prob_outer = 1,
    point_est = "mean"
  ) + 
  geom_vline(xintercept=0, color="black", linetype=2) +
  labs(x="Estimate",
     y="Predictor", 
     title=str_wrap("Posterior Distributions with 95% Equal-Tailed Credible Intervals",40)) +
  scale_y_discrete(labels = function(x) str_wrap(gsub("_", " ", 
                                                      gsub("b_", "", x)), 
                                                 width = 10)) +
  theme(plot.background = element_rect(fill = "#ffffff", linewidth = 0),
        legend.background = element_rect(fill = "#ffffff", linewidth = 0),
        panel.border = element_rect(colour = "black", fill=NA),
        legend.box.background = element_rect(colour = "black"),
        axis.title = element_text(face="bold", size=16),
        axis.text = element_text(size = 11),
        legend.text = element_text(size = 12),
        plot.title = element_text(face="bold", size = 18, hjust = 0.5),
        text = element_text(family = "Ubuntu"))
```

```{r}
posterior_samples = as_draws_df(model_HCC)

color_scheme_set(c(lightorange, orange, orange, orange, orange,lightorange))

mcmc_areas(
    posterior_samples,
    #pars = c("b_bb_z_score", "b_rsi", "b_sentiment_number", "b_linear_combination_sentiment", "ar[1]"),
    pars = c("b_bb_z_score"),
    prob = 0.95,
    prob_outer = 1,
    point_est = "mean"
  ) + 
  geom_vline(xintercept=0, color="black", linetype=2) +
  labs(x="Estimate",
     y="Predictor", 
     title=str_wrap("Posterior Distributions with 95% Equal-Tailed Credible Intervals",40)) +
  scale_y_discrete(labels = function(x) str_wrap(gsub("_", " ", 
                                                      gsub("b_", "", x)), 
                                                 width = 10)) +
  theme(plot.background = element_rect(fill = "#ffffff", linewidth = 0),
        legend.background = element_rect(fill = "#ffffff", linewidth = 0),
        panel.border = element_rect(colour = "black", fill=NA),
        legend.box.background = element_rect(colour = "black"),
        axis.title = element_text(face="bold", size=16),
        axis.text = element_text(size = 11),
        legend.text = element_text(size = 12),
        plot.title = element_text(face="bold", size = 18, hjust = 0.5),
        text = element_text(family = "Ubuntu"))
```

```{r}
posterior_samples = as_draws_df(model_HCC)

color_scheme_set(c(lightorange, orange, orange, orange, orange,lightorange))

mcmc_areas(
    posterior_samples,
    #pars = c("b_bb_z_score", "b_rsi", "b_sentiment_number", "b_linear_combination_sentiment", "ar[1]"),
    pars = c("b_linear_combination_sentiment"),
    prob = 0.95,
    prob_outer = 1,
    point_est = "mean"
  ) + 
  geom_vline(xintercept=0, color="black", linetype=2) +
  labs(x="Estimate",
     y="Predictor", 
     title=str_wrap("Posterior Distributions with 95% Equal-Tailed Credible Intervals",40)) +
  scale_y_discrete(labels = function(x) str_wrap(gsub("_", " ", 
                                                      gsub("b_", "", x)), 
                                                 width = 10)) +
  theme(plot.background = element_rect(fill = "#ffffff", linewidth = 0),
        legend.background = element_rect(fill = "#ffffff", linewidth = 0),
        panel.border = element_rect(colour = "black", fill=NA),
        legend.box.background = element_rect(colour = "black"),
        axis.title = element_text(face="bold", size=16),
        axis.text = element_text(size = 11),
        legend.text = element_text(size = 12),
        plot.title = element_text(face="bold", size = 18, hjust = 0.5),
        text = element_text(family = "Ubuntu"))
```

```{r}
posterior_samples = as_draws_df(model_HCC)

color_scheme_set(c(lightorange, orange, orange, orange, orange,lightorange))

mcmc_areas(
    posterior_samples,
    #pars = c("b_bb_z_score", "b_rsi", "b_sentiment_number", "b_linear_combination_sentiment", "ar[1]"),
    pars = c("ar[1]"),
    prob = 0.95,
    prob_outer = 1,
    point_est = "mean"
  ) + 
  geom_vline(xintercept=0, color="black", linetype=2) +
  labs(x="Estimate",
     y="Predictor", 
     title=str_wrap("Posterior Distributions with 95% Equal-Tailed Credible Intervals",40)) +
  scale_y_discrete(labels = function(x) str_wrap(gsub("_", " ", 
                                                      gsub("b_", "", x)), 
                                                 width = 10)) +
  theme(plot.background = element_rect(fill = "#ffffff", linewidth = 0),
        legend.background = element_rect(fill = "#ffffff", linewidth = 0),
        panel.border = element_rect(colour = "black", fill=NA),
        legend.box.background = element_rect(colour = "black"),
        axis.title = element_text(face="bold", size=16),
        axis.text = element_text(size = 11),
        legend.text = element_text(size = 12),
        plot.title = element_text(face="bold", size = 18, hjust = 0.5),
        text = element_text(family = "Ubuntu"))
```